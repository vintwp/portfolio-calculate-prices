{"version":3,"sources":["scripts/main.js"],"names":["document","addEventListener","volumeStorages","querySelectorAll","typeStorages","windowWidth","window","innerWidth","enumerateDataItems","dataBase","inputValues","storage","transfer","backblaze","minPayment","storagePrice","transferPrice","color","bunny","maxPayment","hdd","ssd","scaleway","multi","single","storageFree","price","transferFree","vultr","countValuesFromInput","inputBarWindow","id","includes","value","countCheckedRadioButtons","checkedRadioButtons","forEach","checked","push","calcPrices","dataItemKey","dataItemValue","dataItem","inputTransfer","inputStorage","totalPrice","constructor","name","Math","floor","s","t","intersection","storeStorage","checkedStorages","Set","filter","item","has","Object","keys","trunc","minimalPrice","maximalPrice","calculatedDataBase","key","undefined","drawDiagram","widthHeightVariable","progressBar","querySelector","progressBarPrice","progressBarWidth","style","cssText","textContent","storageVolume","storageButton"],"mappings":"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","file":"main.55c4610b.js","sourceRoot":"..\\src","sourcesContent":["/* eslint-disable max-len */\n'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const volumeStorages = document.querySelectorAll('[name=\"volume\"]');\n  const typeStorages = document.querySelectorAll('.comparison__fields  input');\n  let windowWidth = window.innerWidth;\n\n  const windowWidthResizeCalc = function() {\n    enumerateDataItems(dataBase, inputValues);\n  };\n\n  window.addEventListener('resize', () => {\n    windowWidth = window.innerWidth;\n    windowWidthResizeCalc();\n  });\n\n  // Volumes of storage and transwer\n  const inputValues = {\n    storage: 0,\n    transfer: 0,\n  };\n\n  // All storage and transfer variables per GB\n  const dataBase = {\n    backblaze: {\n      minPayment: 7,\n      storagePrice: 0.005,\n      transferPrice: 0.01,\n      color: '#e41e2a',\n    },\n    bunny: {\n      maxPayment: 10,\n      storagePrice: {\n        hdd: 0.01,\n        ssd: 0.02,\n      },\n      transferPrice: 0.01,\n      color: '#faae13',\n    },\n    scaleway: {\n      storagePrice: {\n        multi: 0.06,\n        single: 0.03,\n        storageFree: 75,\n      },\n      transferPrice: {\n        price: 0.02,\n        transferFree: 75,\n      },\n      color: '#b75de8',\n    },\n    vultr: {\n      minPayment: 5,\n      storagePrice: 0.01,\n      transferPrice: 0.01,\n      color: '#2e6be6',\n    },\n  };\n\n  // Get input values from bar and input window\n\n  function countValuesFromInput(inputBarWindow) {\n    if (inputBarWindow.id.includes('transfer')) {\n      inputValues['transfer'] = +inputBarWindow.value;\n    } else {\n      inputValues['storage'] = +inputBarWindow.value;\n    }\n  }\n\n  function getValuesFromInput() {\n    volumeStorages.forEach((storageVolume) => {\n      countValuesFromInput(storageVolume);\n\n      storageVolume.addEventListener('input', () => {\n        countValuesFromInput(storageVolume);\n        enumerateDataItems(dataBase, inputValues);\n      });\n    });\n  }\n\n  // Get checked radio buttons\n\n  function countCheckedRadioButtons() {\n    const checkedRadioButtons = [];\n\n    typeStorages.forEach((storage) =>\n      storage.checked ? checkedRadioButtons.push(storage.value) : 0\n    );\n\n    return checkedRadioButtons;\n  }\n\n  function getValuesFromRadioButtons() {\n    let checkedRadioButtons = [];\n\n    typeStorages.forEach((storageButton) => {\n      checkedRadioButtons = countCheckedRadioButtons();\n\n      storageButton.addEventListener('click', () => {\n        checkedRadioButtons = countCheckedRadioButtons();\n        enumerateDataItems(dataBase, inputValues);\n      });\n    });\n\n    return checkedRadioButtons;\n  }\n\n  // Find intersections with checked Radio Buttons and Data Base (need to calc total price)\n\n  function intersection(storeStorage, checkedStorages) {\n    const intersection = new Set(checkedStorages);\n\n    return storeStorage.filter((item) => intersection.has(item));\n  }\n\n  // Calc total prices\n\n  function calcPrices(inputValues, dataItemKey, dataItemValue) {\n    const dataItem = dataItemValue;\n    const checkedRadioButtons = countCheckedRadioButtons();\n    const minPayment = dataItem.minPayment ? dataItem.minPayment : 0;\n    const maxPayment = dataItem.maxPayment ? dataItem.maxPayment : 0;\n    const inputTransfer = inputValues.transfer;\n    const inputStorage = inputValues.storage;\n    let totalPrice = 0;\n\n    if (\n      dataItem.transferPrice.constructor.name !== 'Object' &&\n      dataItem.storagePrice.constructor.name !== 'Object'\n    ) {\n      let transferTotalPrice = Math.floor(\n        dataItem.transferPrice * inputTransfer\n      );\n      let storageTotalPrice = Math.floor(dataItem.storagePrice * inputStorage);\n      totalPrice = transferTotalPrice + storageTotalPrice;\n    } else {\n      const s = { ...dataItem.storagePrice };\n      const t = { ...dataItem.transferPrice };\n      const storageFree = s.storageFree || 0;\n      const transferFree = t.transferFree || 0;\n      const choosenStorage = intersection(Object.keys(s), checkedRadioButtons);\n\n      const storagePrice = s[choosenStorage];\n      const transferPrice = t['price'] || dataItem['transferPrice'];\n\n      totalPrice =\n        (inputStorage - storageFree) * storagePrice +\n        (inputTransfer - transferFree) * transferPrice;\n    }\n\n    if (minPayment !== 0 && minPayment > totalPrice) {\n      totalPrice = minPayment;\n    } else if (maxPayment !== 0 && maxPayment < totalPrice) {\n      totalPrice = maxPayment;\n    } else {\n      totalPrice = totalPrice < 0 ? 0 : totalPrice;\n    }\n    totalPrice = Math.trunc(totalPrice * 100) / 100;\n\n    return totalPrice;\n  }\n\n  // Enumerate data base\n\n  function enumerateDataItems(dataBase, inputValues) {\n    let minimalPrice;\n    let maximalPrice;\n    const calculatedDataBase = {};\n\n    for (let key in dataBase) {\n      let price = calcPrices(inputValues, key, dataBase[key]);\n      calculatedDataBase[key] = price;\n\n      minimalPrice\n        = minimalPrice === undefined || minimalPrice > price\n          ? price\n          : minimalPrice;\n\n      maximalPrice\n        = maximalPrice === undefined || maximalPrice < price\n          ? price\n          : maximalPrice;\n    }\n    calculatedDataBase['minimalPrice'] = minimalPrice;\n    calculatedDataBase['maximalPrice'] = maximalPrice;\n    drawDiagram(calculatedDataBase);\n  }\n\n  function drawDiagram(calculatedDataBase) {\n    let widthHeightVariable = windowWidth < 768 ? 'width' : 'height';\n\n    for (let key in calculatedDataBase) {\n      if (key !== 'minimalPrice' && key !== 'maximalPrice') {\n        const progressBar = document.querySelector(\n          `.progress-bar--${key} .progress-bar__inner`\n        );\n        const progressBarPrice = document.querySelector(\n          `.progress-bar--${key} span`\n        );\n        const progressBarWidth\n          = (calculatedDataBase[key] / (calculatedDataBase['maximalPrice'] + 15)) * 100 + 1;\n\n        if (calculatedDataBase[key] <= calculatedDataBase.minimalPrice) {\n          progressBar.style.cssText = `${widthHeightVariable}: ${progressBarWidth}%; background-color: ${dataBase[key].color}`;\n        } else {\n          progressBar.style.cssText = `${widthHeightVariable}: ${progressBarWidth}%; background-color: ''`;\n        }\n        progressBarPrice.textContent = calculatedDataBase[key] + '$';\n      }\n    }\n  }\n\n  getValuesFromInput();\n  getValuesFromRadioButtons();\n  enumerateDataItems(dataBase, inputValues);\n});\n"]}